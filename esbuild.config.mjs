import builtins from "builtin-modules";
import esbuild from "esbuild";
import { lessLoader } from "esbuild-plugin-less";
import process from "process";
const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const cssLoaderPlugin = {
	name: "css-loader",
	setup(build) {
		build.onLoad({ filter: /\.css$/ }, async (args) => {
			const { readFile } = await import("fs/promises");
			const contents = await readFile(args.path, "utf8");
			return {
				contents: `const style = document.createElement('style');
					 style.innerText = ${JSON.stringify(contents)};
					 document.head.appendChild(style);`,
				loader: "js", // Treat the output as JavaScript
			};
		});
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
		css: banner,
	},
	entryPoints: ["./src/main.ts", "./src/styles.less"],
	outdir: "./",
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true, // dead code elimination
	// outfile: "main.js",
	minify: prod, // Minify the code
	plugins: [cssLoaderPlugin, lessLoader()],
	jsx: "automatic", // 'transform|automatic|null' "jsx": "react-jsx" in tsconfig.json
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
